# -*- mode: makefile-gmake -*-
#
# Copyright 2017-2020, Schlumberger
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Rules for integrating second- and third party dependencies.
# Variables that need to be set when called:
#
#    $(BUILDROOT) -- source tree
#
# Targets defined here:
#     packages, packages-clean, $(SD_SENTINEL), $(SD_LIBRARY)
#
# Variables set here to be used by caller:
#
#    $(SD_CXXFLAGS) -- to be appended to CXXFLAGS for -I and -D options.
#    $(SD_LIBRARY)  -- The shared object to link with, empty if not found
#    $(SD_SENTINEL) -- To be used for dependencies instead of $(SD_LIBRARY)
#    ... ditto for other packages we need, such as ZFP.
#
# If HAVE_SD= or HAVE_SD=yes was given on the make command line we respect it.
# If not given then we turn it on or off depending on whether the zipfile exists.
# Ditto for ZFP.

$(if $(strip $(BUILDROOT)),,$(error BUILDROOT was not set))

CONFIG_FILE  = $(BUILDROOT)/build/deploy/config.sh

SD_BUILDDIR  = $(BUILDROOT)/build/temp/Seismic-Drive
SD_ZIPFILE   = $(BUILDROOT)/pkg/sdapi_linux64.tar.gz
SD_SENTINEL  = $(SD_BUILDDIR)/sdapi.timestamp
HAVE_SD      = yes
HAVE_INTERNAL_SD := $(if $(and $(HAVE_SD),$(SDAPI_INTERNAL)),yes,)
SD_CXXFLAGS  = $(if $(HAVE_SD),-I$(SD_BUILDDIR)/include -DHAVE_SD)
SD_CXXFLAGS += $(if $(HAVE_INTERNAL_SD), -DHAVE_INTERNAL_SD)
SD_LIBRARY   = $(if $(HAVE_SD),$(SD_BUILDDIR)/lib/linux64/libsdapi.so)

ZFP_BUILDDIR = $(BUILDROOT)/build/temp/zfpbuildnative
ZFP_ZIPFILE  = $(BUILDROOT)/external/zfp-0.5.5.tar.gz
ZFP_SENTINEL = $(ZFP_BUILDDIR)/zfp.timestamp
HAVE_ZFP    := $(if $(wildcard $(ZFP_ZIPFILE)),yes,)
ZFP_CXXFLAGS = $(if $(HAVE_ZFP),-I$(ZFP_BUILDDIR)/include -DHAVE_ZFP)
ZFP_LIBRARY  = $(if $(HAVE_ZFP),$(ZFP_BUILDDIR)/build/lib64/libzfp.so)

.PHONY: packages packages-clean

packages: $(SD_SENTINEL) $(ZFP_SENTINEL) $(CONFIG_FILE)
	@/bin/true

packages-clean:
	$(RM) -rf $(SD_BUILDDIR) $(ZFP_BUILDDIR)
	$(RM) $(CONFIG_FILE)

$(CONFIG_FILE): ALWAYS
	mkdir -p $(@D)
	echo > $@
	echo >> $@ 'HAVE_SD="$(HAVE_SD)"'
	echo >> $@ 'HAVE_ZFP="$(HAVE_ZFP)"'
	echo >> $@ 'HAVE_INTERNAL_SD="$(HAVE_INTERNAL_SD)"'

.PHONY: ALWAYS
ALWAYS:

# Unzip the SDAPI tarball into build/Seismic-Drive which will be used
# during building, both for headers and for the binary. Note: Build
# dependencies to libsdapi.so* might work better with $(SD_SENTINEL)
# than $(SD_LIBRARY) due to some chicken and egg problems with
# expansion of wildcards. If the seismic store library was not found,
# $(SD_SENTINEL) will still be created to simplify the rest of the
# build rules. While $(SD_LIBRARY) will be empty.

ifneq ($(strip $(HAVE_SD)),)
$(SD_SENTINEL) $(SD_LIBRARY): $(SD_ZIPFILE)
	$(RM) -rf $(SD_BUILDDIR)
	/bin/mkdir -p $(SD_BUILDDIR)
	tar zxf $(SD_ZIPFILE) -C $(SD_BUILDDIR) --wildcards '*/*.so*' 'include' 'version.txt'
	@echo "SD binary tarball:"
	find $(SD_BUILDDIR)
	ldd $(SD_BUILDDIR)/lib/linux64/libsdapi.so
	touch $(SD_SENTINEL)
else
$(SD_SENTINEL):
	@echo "$(SD_ZIPFILE) not found. Building without cloud support."
	$(RM) -rf $(SD_BUILDDIR)
	/bin/mkdir -p $(SD_BUILDDIR)
	touch $(SD_SENTINEL)
endif

# Handle ZFP similar to Seismic Store, except that here we need to
# build the package in addition to unpacking it.

# The following sed command line is a messy way of suppressing a false
# positive from the vulnerability scanner we are using. The scanner
# doesn't realize that "access" is a member function, not ::access
# from libc. So the code could be patched to rename it. Currently not
# enabled (it needs to go right after the tar unpack) because it is
# just too ugly.
#sed -i -e 's/access *(/access_(/' `grep -rl 'access *(' $(ZFP_BUILDDIR)`

ifneq ($(strip $(HAVE_ZFP)),)
ZFPCMAKE = $(if $(wildcard /usr/bin/cmake3),/usr/bin/cmake3,/usr/bin/cmake)
$(ZFP_SENTINEL) $(ZFP_LIBRARY): $(ZFP_ZIPFILE) Makefile | $(BIN_DIR)
	$(RM) -rf $(ZFP_BUILDDIR)
	/bin/mkdir -p $(ZFP_BUILDDIR)/build
	/bin/tar -C $(ZFP_BUILDDIR) --strip-components=1 -xzf $(ZFP_ZIPFILE) --exclude examples --exclude utils
	(cd $(ZFP_BUILDDIR)/build; $(ZFPCMAKE) -DBUILD_ZFPY=OFF -DBUILD_SHARED_LIBS=ON -DBUILD_UTILITIES=OFF .. && make)
	test -d $(ZFP_BUILDDIR)/build/lib64/. || ln -s lib $(ZFP_BUILDDIR)/build/lib64
	touch $(ZFP_SENTINEL)
else
$(ZFP_SENTINEL):
	@echo "$(ZFP_ZIPFILE) not found. Building without compression support."
	$(RM) -rf $(ZFP_BUILDDIR)
	/bin/mkdir -p $(ZFP_BUILDDIR)
	touch $(ZFP_SENTINEL)
endif
